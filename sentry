#!/bin/bash
# This script helps doing with sentry docker image.
# More informations: https://hub.docker.com/_/sentry/

source ./config

key_file=./sentry-secret-key
set_secret_key() {
        [ ! -f $key_file ] && docker run --rm $COOG_SENTRY_IMAGE generate-secret-key > $key_file
        SENTRY_SECRET_KEY=`cat $key_file`
}

run() {
        set_secret_key || return $?
        local mode; mode=$1; shift
        local args; local name
        if [ $mode = d ]
        then
                args="-d --name=$1"
                shift
                [ $# -eq 0 ] && args="$args -p 9000:9000"
        elif [ $mode = i ]
        then
                args="-ti --rm"
        else
                return 1
        fi
        docker run \
                $args \
                --link $COOG_POSTGRES:postgres \
                -e "SENTRY_SECRET_KEY=$SENTRY_SECRET_KEY" \
                -e "SENTRY_DB_USER=$COOG_DB_USERNAME" \
                -e "SENTRY_DB_PASSWORD=$COOG_DB_PASSWORD" \
                -e "SENTRY_DB_NAME=$COOG_SENTRY_DB_NAME" \
                --link $COOG_REDIS:redis \
                -e "SENTRY_REDIS_DB=$COOG_SENTRY_REDIS_DB" \
                $COOG_SENTRY_IMAGE $*
}

upgrade() {
        run i sentry upgrade
}

daemon() {
        run d $COOG_SENTRY-celery-worker sentry celery worker && \
                run d $COOG_SENTRY-celery-beat sentry celery beat && \
                run d $COOG_SENTRY

}

client() {
        xdg-open "http://"`./ip $COOG_SENTRY`":9000"
}

[ -z $1 ] && echo Possible commands: upgrade - daemon - client && exit 1
[ $1 = upgrade ] && { shift; upgrade $*; exit $?; }
[ $1 = daemon ] && { shift; daemon $*; exit $?; }
[ $1 = client ] && { shift; client $*; exit $?; }
echo Unknown command && exit 1
