#!/bin/bash
# This script helps doing with sentry docker image.
# More informations: https://hub.docker.com/_/sentry/

get_key() {
        [ ! -f $SENTRY_KEY ] && return 1
        cat $SENTRY_KEY
}

set_key() {
        docker run --rm $SENTRY_IMAGE generate-secret-key > $SENTRY_KEY
}

init_conf() {
        [ -e $SENTRY_CONF ] && echo backup old config before && return 1
        install -D $script_dir/config/sentry.yml $SENTRY_CONF

}

_run() {
        local secret_key
        secret_key=`get_key`
        [ $? -ne 0 ] && echo "set key before starting" && return 1
        local mode; mode=$1; shift
        local args
        if [ $mode = i ]
        then
                args="-ti --rm"
        elif [ $mode = d ]
        then
                args='-d'
        elif [ $mode = m ]
        then
                args="-d --name=$SENTRY_CONTAINER"
                [ ! -z $SENTRY_PUB_PORT ] && args="$args -p $SENTRY_PUB_PORT:9000"
        else
                echo "unexpected mode" && return 1
        fi
        docker run \
                $args \
                -e "SENTRY_SECRET_KEY=$secret_key" \
                -e "SENTRY_POSTGRES_HOST=$PG_HOST" \
                -e "SENTRY_POSTGRES_PORT=$PG_PORT" \
                -e "SENTRY_DB_USER=$SENTRY_DB_USERNAME" \
                -e "SENTRY_DB_PASSWORD=$SENTRY_DB_PASSWORD" \
                -e "SENTRY_DB_NAME=$SENTRY_DB_NAME" \
                -e "SENTRY_REDIS_HOST=$REDIS_HOST" \
                -e "SENTRY_REDIS_PORT=$REDIS_PORT" \
                -e "SENTRY_REDIS_DB=$SENTRY_CACHE_DB" \
                -v $SENTRY_VOLUME:/var/lib/sentry/files \
                -v $SENTRY_CONF:/etc/sentry/config.yml \
                $SENTRY_IMAGE $*
}

upgrade() {
        _run i sentry upgrade $*
}

worker() {
        _run d sentry celery worker $*
}

beat() {
        _run d sentry celery beat $*
}

server() {
        _run m $*
}

client() {
        xdg-open "http://$SENTRY_HOST:$SENTRY_PORT"
}

usage() {
        echo
        echo Possible commands
        echo
        echo "  get_key   : get secret key (to link workers)"
        echo "  set_key   : generate secret key"
        echo "  init_conf : init sentry configuration file"
        echo "  upgrade   : upgrade sentry database"
        echo "  worker    : launch a sentry celery worker (docker container)"
        echo "  beat      : launch a sentry celery beat (docker container)"
        echo "  server    : launch the sentry server (docker container)"
        echo "  client    : open browser on the sentry url"
        echo
}

main() {
        local script_path; script_path=`readlink -f $0`
        local script_dir; script_dir=`dirname $script_path`
        source $script_dir/.env
        #
        [ -z $1 ] && usage && return 1
        local cmd; cmd=$1; shift
        #
        [ $cmd = get_key ] && { get_key $*; return $?; }
        [ $cmd = set_key ] && { set_key $*; return $?; }
        [ $cmd = init_conf ] && { init_conf $*; return $?; }
        [ $cmd = upgrade ] && { upgrade $*; return $?; }
        [ $cmd = worker ] && { worker $*; return $?; }
        [ $cmd = beat ] && { beat $*; return $?; }
        [ $cmd = server ] && { server $*; return $?; }
        [ $cmd = client ] && { client $*; return $?; }
        usage && return 1
}

main $*
